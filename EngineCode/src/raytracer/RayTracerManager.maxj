package raytracer;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup.MemoryAccessPattern;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class RayTracerManager extends CustomManager {

	private static final String s_kernelName = "RayTracerKernel";

	public RayTracerManager(RayTracerEngineParameters engineParameters) throws Exception {
		super(engineParameters);

		DebugLevel myDebugLevel = new DebugLevel();
		myDebugLevel.setHasStreamStatus(true);
		debug.setDebugLevel(myDebugLevel);

		KernelBlock rayTracer = addKernel(new RayTracerKernel(makeKernelParameters(s_kernelName)));

		/* Memory initialisation for triangles */

		KernelBlock memoryCommandGenerator = addKernel(new TriangleReaderCommandGenerator(makeKernelParameters("MemoryCommandGenerator")));

		addStreamToOnCardMemory("triangles_to_mem", MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("triangles_in", StreamMode.LOW_LATENCY_ENABLED);
		rayTracer.getInput("triangles_in").connect(addStreamFromOnCardMemory("triangles_from_mem", memoryCommandGenerator.getOutput("read_commands")));

		rayTracer.getInput("rays_in").connect(addStreamFromCPU("rays_in"));
		addStreamToCPU("results_out").connect(rayTracer.getOutput("results_out"));

		createSLiCinterface(modeDefault());
		createSLiCinterface(memoryInitialisationInterface());

		configBuild(engineParameters);
	}

	private static EngineInterface modeDefault() {
		EngineInterface engine_interface = new EngineInterface();

		return engine_interface;
	}

	private static EngineInterface rayTracerInterface()
	{
		EngineInterface engine_interface = new EngineInterface("rayTracer");

		InterfaceParam total_rays = engine_interface.addParam("total_rays", CPUTypes.INT32);
		InterfaceParam triangles_address = engine_interface.addParam("triangles_address", CPUTypes.INT32);
		InterfaceParam total_triangles = engine_interface.addParam("total_triangles", CPUTypes.INT32);

		/* Calculate how many ticks are required in the main kernel to process all the triangles and rays */
		engine_interface.ignoreAll(Direction.IN_OUT);
		return engine_interface;
	}

	private static EngineInterface memoryInitialisationInterface()
	{
		EngineInterface engine_interface = new EngineInterface("memoryInitialisation");

		InterfaceParam lmem_size = engine_interface.addParam("size", CPUTypes.INT32);
		InterfaceParam lmem_address = engine_interface.addParam("address", CPUTypes.INT32);
		engine_interface.setLMemLinear("triangles_to_mem", lmem_address, lmem_size);
		engine_interface.setStream("triangles_in", CPUTypes.INT32, lmem_size);

		engine_interface.ignoreAll(Direction.IN_OUT);

		return engine_interface;
	}

	private void configBuild(RayTracerEngineParameters params) {
		BuildConfig buildConfig = getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());
	}

	public static void main(String[] args) throws Exception {
		RayTracerManager manager = new RayTracerManager(new RayTracerEngineParameters(args));
		manager.build();
	}
}
